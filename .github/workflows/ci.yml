# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI-Project1
on:
  push:
    branches: [ main ]
    # paths:
    #     - 'project1/**'   
  pull_request:
    branches: [ main ]
    # paths:
    #     - 'project1/**'   

env:
    PYTHON_VERSION: "3.10.12"
    POETRY_VERSION: "1.5.1"
    WORKING_DIRECTORY: "project1"

defaults:
    run:
        shell: bash
        working-directory: "project1" #${{ env.WORKING_DIRECTORY }}

jobs:
  Quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Install dependencies
      run: |
        poetry install
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     python -m poetry run flake8 . --exclude .venv --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     python -m poetry run flake8 . --exclude .venv --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        poetry run python -m pytest -v tests
    
  Release:
    needs: Quality
    # https://github.community/t/how-do-i-specify-job-dependency-running-in-another-workflow/16482
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore(release):')
    runs-on: ubuntu-latest
    concurrency: release #to prevent ra ce condition on rapid pushes
    permissions:
        id-token: write
        contents: write #to allow for release asset creation
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
            version: ${{ env.POETRY_VERSION }}
            virtualenvs-create: true
            virtualenvs-in-project: true
            installer-parallel: true
      # - name: Run image
      #   uses: abatilo/actions-poetry@v2
      #   with:
      #     poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install dependencies
        run: |
          poetry install
      # - name: Python Semantic Release
      #   uses: python-semantic-release/python-semantic-release@master
      #   with:
      #       directory: ${{ env.WORKING_DIRECTORY }}
      #       github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Semantic Release
        run: |
          poetry run semantic-release version
          poetry run semantic-release publish
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            # PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
